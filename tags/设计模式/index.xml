<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 破壳 - 虽不能至，心向往之</title>
    <link>https://urzz.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 破壳 - 虽不能至，心向往之</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Mar 2020 21:59:20 +0000</lastBuildDate>
    <atom:link href="https://urzz.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Switch的优化方式</title>
      <link>https://urzz.xyz/2020/03/30/improve-use-of-switch/</link>
      <pubDate>Mon, 30 Mar 2020 21:59:20 +0000</pubDate>
      <guid>https://urzz.xyz/2020/03/30/improve-use-of-switch/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;&#xA;&lt;p&gt;switch/case 是Java的一个流程控制语法，作为多if/else条件判断的替代语法，平常用的还是很多的，毕竟比起看起来就很繁琐、难以阅读的if/else，switch/case更便于阅读理解一段代码的逻辑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>设计模式 - 单例模式的几种实现方式</title>
      <link>https://urzz.xyz/2019/07/08/java-singleton-pattern/</link>
      <pubDate>Mon, 08 Jul 2019 20:02:35 +0000</pubDate>
      <guid>https://urzz.xyz/2019/07/08/java-singleton-pattern/</guid>
      <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;什么是单例模式？&#xA;在整个系统中，一个类永远只有一个实例化的对象，被称为单例&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h2 id=&#34;作用&#34;&gt;作用&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;单例模式可以减少一个频繁被创建的重量级对象在多次实例化的时候所花费的时间，当一个类实例化所需要的时间比较长的时候，就可以考虑使用单例了。一来节约了对象多次创建所花费的时间，二来可以节约资源。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
