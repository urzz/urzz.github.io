<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 破壳 - 虽不能至，心向往之</title>
    <link>https://urzz.xyz/tags/spring/</link>
    <description>Recent content in Spring on 破壳 - 虽不能至，心向往之</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 03 Jul 2019 19:08:29 +0000</lastBuildDate>
    <atom:link href="https://urzz.xyz/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nginx反代Spring Boot后端服务后，丢失cookie</title>
      <link>https://urzz.xyz/2019/07/03/spring-boot-nginx-cookie-nout-found/</link>
      <pubDate>Wed, 03 Jul 2019 19:08:29 +0000</pubDate>
      <guid>https://urzz.xyz/2019/07/03/spring-boot-nginx-cookie-nout-found/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;为了解决跨域请求无法使用cookie的问题，使用nginx对后端服务做了反代。但是反代之后，却发现cookie没有被正确传递。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h3 id=&#34;相关配置&#34;&gt;相关配置&lt;/h3&gt;&#xA;&lt;h4 id=&#34;nginx-反代配置&#34;&gt;nginx 反代配置&lt;/h4&gt;&#xA;&lt;p&gt;nginx反代的配置很简单，只是简单设置了proxy_pass&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 整合shiro使用自定义filter</title>
      <link>https://urzz.xyz/2019/06/11/spring-boot-shiro-custom-filter/</link>
      <pubDate>Tue, 11 Jun 2019 21:33:38 +0000</pubDate>
      <guid>https://urzz.xyz/2019/06/11/spring-boot-shiro-custom-filter/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;最近一个项目的认证是用shiro实现的，以前没有做过spring boot + shiro的整合，所以遇到了一些奇奇怪怪的坑&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;p&gt;shiro的整合具体这边就不做阐述了，大概有以下几个类:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 整合shiro后的跨域设置</title>
      <link>https://urzz.xyz/2019/06/05/spring-shiro-cors-config/</link>
      <pubDate>Wed, 05 Jun 2019 21:13:14 +0000</pubDate>
      <guid>https://urzz.xyz/2019/06/05/spring-shiro-cors-config/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;之前的项目都没有跨域的要求，都是通过nginx反代后端接口避免跨域请求的，但是最近的项目要求要处理跨域的请求，所以记录一下&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h3 id=&#34;1-正常的spring-boot项目&#34;&gt;1. 正常的Spring boot项目&lt;/h3&gt;&#xA;&lt;p&gt;基本的spring boot项目只需要写个配置类，实现&lt;code&gt;WebMvcConfigurer&lt;/code&gt;接口的&lt;code&gt;addCorsMappings&lt;/code&gt;方法&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于Spring做请求参数的加解密/签名校验</title>
      <link>https://urzz.xyz/2019/05/30/spring-param-encrypt/</link>
      <pubDate>Thu, 30 May 2019 14:04:34 +0000</pubDate>
      <guid>https://urzz.xyz/2019/05/30/spring-param-encrypt/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;之前做的一个对外网关项目，安全需要所以得对参数进行加密校验&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;参数&#34;&gt;参数&lt;/h3&gt;&#xA;&lt;p&gt;接口交互约定了三个参数：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;timestamp（请求时间戳）&lt;/li&gt;&#xA;&lt;li&gt;data（实际请求数据，经过加密得到的字符串）&lt;/li&gt;&#xA;&lt;li&gt;sign（以HMAC-SHA1算法对参数的签名）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;请求方式&#34;&gt;请求方式&lt;/h3&gt;&#xA;&lt;p&gt;接口统一使用json来进行交互，请求的Content-Type统一为application/json&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
